I am working on converting a businessDSL into Playwright tests. Provide separate files: visibility and functinality test files without any additional information. I will provide you with the businessDSL. Here are the key requirements and you should consider this rules.
1. Parse the DSL:
      nth-instance: Indicates the exact matching instance of a repeated element. If present, apply .nth() in the Playwright locator with the provided index.
2. Text-based locators: 
  All locators for text-based elements (labels, buttons, headers) must use translation keys. Translations are fetched using the getTranslations function and should be integrated into the locators as `${translation.key}`. key's first letter is lowercase. 
  
  Use page.getByText() for labels, buttons, or any other text-based elements.
  Use page.getByLabel() for elements that are associated with a label.
  Use page.getByRole() for headings.
  Examples: 
         const switchButton = await page.getByLabel(`${translation.widgetBubbleMessageText}`, { exact: true });
         const switchLabel = await page.getByText(`${translation.showSupportName}`, { exact: true });
         const saveButton = await page.getByText(`${translation.save}`, {exact: true });
         const heading = await page.getByRole('heading', { name: `${translation.settings}`, exact: true });

  Using getByText() and there's extra argument in the .yml file nth-matching-element the value is a locator to the n-th matching element. This is important. 
  Example:
        const label = await page.getByText(`${translation.widgetBubbleMessageText}`).nth(0);
        const label = await page.getByText(`${translation.widgetBubbleMessageText}`).nth(1);
  Otherwise:
  Example: 
    const label = await page.getByText(`${translation.widgetProactiveSeconds}`, { exact: true });
    const input = await page.getByLabel(`${translation.widgetProactiveSeconds}`, { exact: true });
    await expect(label).toBeVisible();
    await expect(input).toBeVisible();

 When parent element is defined i.e card__body first select this and then the underlying elements i.e
      const card = page.locator('.card__body');
      const element = card.locator()

3. Dropdown handling: 
   Use the following format for dropdown (select) elements FOR EXAMPLE:
   const select = await page.getByRole('combobox', { name: `${translation.widgetAnimation}` });
   When checking for the options in the dropdown (select), click on the element and then look for the options.

4. Paragraph handling: 
   When an element has only paragraphs in it and no labels, dropdowns etc, use the following format and handle the other elements like labels, dropdowns, button separately.: 
   const cardBody = page.locator('card__body').first();

    const paragraphs = cardBody.locator('p');

    // Check each paragraph is visible
    for (let i = 0; i < await paragraphs.count(); i++) {
      await expect(paragraphs.nth(i)).toBeVisible();
    }
5 Colorpicker handling:
   Use the following format for colorpicker elements FOR EXAMPLE:
   await colorInput.click();
   const colorPickerInput = await page.getByLabel('hex')
   const initialColor = await colorPickerInput.inputValue();


6. Test setup:
Include navigation and fetching translations in a beforeEach hook to ensure the page and translations are ready before running each test.
Base URL: https://admin.prod.buerokratt.ee. Add this before the url provided in the DSL under resource header.
Translations should be defined as:
  import { getTranslations } from '@translation/languageDetector.js';
  let translation;

And in beforeEach:
a. Each test should have annotation. So lets add in beforeEach: test.info().annotations.push({ type: 'repository', description: '<description>' });
   where instead of <description> should take value from BusinessDSL description: value. 

b. translation = await getTranslations(page);
   Translation should be after the playwright test has gone to the page to avoid security error.

c. Include a 3000ms timeout in the beforeEach to ensure all elements load properly.

7. Logical grouping:
Group tests using test.describe() by logical parts (e.g., headings, card body, footer).
Combine related assertions (e.g., heading and button checks) into single tests where possible.
The output should be a valid Playwright test file, ready for copy-pasting and running without further modification."

8. Exact match for similar elements:
Add { exact: true } to all locators.

9. Functionality testing.

Test all eligble functionality and save and after return them to their original values. 
This means that you should capture the values for the inputs first and reset them at the end.

This means that if there is a save button in the DSL you should capture and click it at the end of each test, refresh the page and check if your input value is there. 
At the end of a each test it should be reset to the original value. When it comes to saving the values, wait 3 seconds after saving to ensure the values are saved.