"I am working on converting a businessDSL into Playwright tests. Provide the test file without any additional information. I will provide you with the businessDSL. Here are the key requirements:

1. Text-based locators: 
  All locators for text-based elements (labels, buttons, headers) must use translation keys. Translations are fetched using the getTranslations function and should be integrated into the locators as `${translation.key}`. key's first letter is lowercase. 
  For example:
  Use page.getByText() for labels, buttons, or any other text-based elements.
  Use page.getByLabel() for elements that are associated with a label.
  Use page.getByRole() for headings. DO NOT USE GETBYROLE FOR OTHER ELEMENTS.
  Using getByText() and there's extra argument in the .yml file nth-matching-element the value is a locator to the n-th matching element. This is important. 
  Example:
        const label = await page.getByText(`${translation.widgetBubbleMessageText}`).nth(0);
        const label = await page.getByText(`${translation.widgetBubbleMessageText}`).nth(1);
  Otherwise:
  Example: 
  ALWAYS USE GETBYTEXT FOR THE LABEL AND GETBYLABEL FOR THE ELEMENT 
    const label = await page.getByText(`${translation.widgetProactiveSeconds}`, { exact: true });
    const input = await page.getByLabel(`${translation.widgetProactiveSeconds}`, { exact: true });
    await expect(label).toBeVisible();
    await expect(input).toBeVisible();
  When it comes to body, always check by the content of the card for example:
    const container = page.locator('.card');
    const label = container.locator(`${translation.widgetProactiveSeconds}`, { exact: true });

    const cardBody = page.locator('.card__body');
    const trackBody = cardBody.locator('.track');
    const dayLabel = cardBody.getByText(`${translation[day]}`, { exact: true });
    const daySwitch = cardBody.getByText(`${translation[day]}`, { exact: true }).locator('div div.switch button');
        
    const startTimeInput = cardBody.getByLabel(`${translation[day]}`, { exact: true }).locator('.endTime');
    const endTimeInput = cardBody.getByLabel(`${translation[day]}`, { exact: true }).locator('.startTime');

3. Dropdown handling: 
   Use the following format for dropdown (select) elements:
   const select = await page.getByRole('combobox', { name: `${translation.widgetAnimation}` });

4. Table handling: 
   Consider only first row when checking data persistence. For example when checking edit and delete buttons in table data.
   For example: const editButton = container.getByRole('button', { name: `${translation.edit}` }).first();
                const deleteButton = container.getByRole('button', { name: `${translation.delete}` }).first();

5. Test setup:
Include navigation and fetching translations in a beforeEach hook to ensure the page and translations are ready before running each test.
Base URL: https://admin.prod.buerokratt.ee. Add this before the url provided in the DSL under resource header.
Translations should be defined as:
  import { getTranslations } from '@translation/languageDetector.js';
  let translation;

And in beforeEach:
translation = await getTranslations(page);
Translation should be after the playwright test has gone to the page to avoid security error.
Include a 3000ms timeout in the beforeEach to ensure all elements load properly.

6. Logical grouping:
Group tests using test.describe() by logical parts (e.g., headings, card body, footer).
Combine related assertions (e.g., heading and button checks) into single tests where possible.
The output should be a valid Playwright test file, ready for copy-pasting and running without further modification."

7. Exact match for similar elements:
Add { exact: true } to all locators.