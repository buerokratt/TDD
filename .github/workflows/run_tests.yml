name: Run Tests and Create Issues

on: 
  workflow_dispatch:

permissions:
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PROJECT_NUMBER: 56           # TO BE REPLACED
      ORGANIZATION: buerokratt
      FIELD_NAME: Status           # TO BE REPLACED
      FIELD_VALUE: "Ready"         # TO BE REPLACED

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Docker
        run: docker compose up -d

      - name: Install Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npm install @playwright/test && npx playwright install --with-deps

      - name: Run Playwright tests
        id: playwright
        run: |
          npx playwright test tests/always-fail.test.js --workers=2
        continue-on-error: true

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Parse failed tests
        id: parse_tests
        run: |
          # Collect failed tests into an array
          FAILED_TESTS=$(jq -c '[.suites[]?.specs[]? | select(.tests[]?.results[-1].status == "failed") | 
          {title: .title, error: .tests[]?.results[-1].error.message, repository: (.tests[]?.annotations[]? | select(.type == "repository") | .description)}]' playwright-report.json)
          
          echo "Failed tests: $FAILED_TESTS"

          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV

      - name: Debug failed tests output
        run: |
          echo "Raw failed tests output:"
          echo "$FAILED_TESTS"

      - name: Get Project ID, Field ID, and Ready Option ID
        id: get_project_field_and_option_id
        run: |
          echo "Fetching project ID, field ID, and option ID for 'Ready'..."

          project_response=$(curl -X POST \
            -H "Authorization: bearer ${{ secrets.BYK_PAT }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"query { organization(login: \\\"$ORGANIZATION\\\") { projectV2(number: $PROJECT_NUMBER) { id fields(first: 20) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }\"}" \
            https://api.github.com/graphql)

          echo "Project and fields response: $project_response"

          PROJECT_ID=$(echo "$project_response" | jq -r '.data.organization.projectV2.id')
          FIELD_ID=$(echo "$project_response" | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "'"$FIELD_NAME"'") | .id')
          READY_OPTION_ID=$(echo "$project_response" | jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "'"$FIELD_NAME"'") | .options[] | select(.name == "Ready") | .id')

          if [ -z "$PROJECT_ID" ] || [ -z "$FIELD_ID" ] || [ -z "$READY_OPTION_ID" ]; then
            echo "Failed to retrieve Project ID, Field ID, or Ready Option ID. Exiting."
            exit 1
          fi

          echo "Project ID: $PROJECT_ID"
          echo "Field ID for '$FIELD_NAME': $FIELD_ID"
          echo "Ready Option ID: $READY_OPTION_ID"
          
          echo "project_id=$PROJECT_ID" >> $GITHUB_ENV
          echo "field_id=$FIELD_ID" >> $GITHUB_ENV
          echo "ready_option_id=$READY_OPTION_ID" >> $GITHUB_ENV

      - name: Process each failed test
        if: env.FAILED_TESTS != '[]'
        run: |
          echo "Parsing failed tests JSON array: $FAILED_TESTS"

          echo "$FAILED_TESTS" | jq -c '.[]' | while IFS= read -r test; do
            TEST_NAME=$(echo "$test" | jq -r '.title' | sed 's/[[:space:]]*$//')
            ERROR_DETAILS=$(echo "$test" | jq -r '.error' | sed 's/\x1b\[[0-9;]*m//g')
            TARGET_REPOSITORY=$(echo "$test" | jq -r '.repository')

            if [ -z "$TEST_NAME" ] || [ -z "$ERROR_DETAILS" ]; then
              echo "Error: Missing test name or error details. Skipping."
              continue
            elif [ -z "$TARGET_REPOSITORY" ]; then
              echo "No repository annotation found for $TEST_NAME. Skipping issue creation."
              continue
            fi

            echo "Creating new issue in repository $TARGET_REPOSITORY for failed test: $TEST_NAME"

            ENCODED_TEST_NAME=$(echo -n "$TEST_NAME" | jq -sRr @uri)
            echo "Encoded test name: $ENCODED_TEST_NAME"

            search_response=$(curl -s \
              -H "Authorization: token ${{ secrets.BYK_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/search/issues?q=repo:buerokratt/$TARGET_REPOSITORY+is:issue+is:open+in:title+$ENCODED_TEST_NAME")

            echo "Search response: $search_response"  # Print full response for debugging

            issue_count=$(echo "$search_response" | jq -r '.total_count')
            if [ "$issue_count" == "null" ] || [ -z "$issue_count" ]; then
              echo "Error: Failed to parse search response or invalid response format."
              continue
            fi

            if [ "$issue_count" -gt 0 ]; then
              echo "An open issue already exists for $TEST_NAME. Skipping issue creation."
              continue
            fi

            echo "Creating new issue for failed test: $TEST_NAME"

            # Prepare the issue body with initial details
            ISSUE_BODY="A test failed in buerokratt/TDD-Playwright.
          
          Details:
          Test: $TEST_NAME
          \`\`\`plaintext
          $ERROR_DETAILS
          \`\`\`"

            JSON_PAYLOAD=$(jq -n \
              --arg title "$TEST_NAME" \
              --arg body "$ISSUE_BODY" \
              '{
                title: $title,
                body: $body,
                labels: ["bug"]
              }')

            response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.BYK_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$JSON_PAYLOAD" \
              https://api.github.com/repos/buerokratt/$TARGET_REPOSITORY/issues)

            echo "Issue creation response: $response"  # Debugging issue creation

            ISSUE_ID=$(echo "$response" | jq -r '.id')
            ISSUE_NUMBER=$(echo "$response" | jq -r '.number')
            if [ "$ISSUE_ID" == "null" ] || [ -z "$ISSUE_ID" ]; then
              echo "Failed to create issue for $TEST_NAME. Response: $response"
              continue
            fi

            echo "Created issue #$ISSUE_NUMBER for failed test: $TEST_NAME"

            # Get the global ID of the issue for project assignment
            issue_id_response=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.BYK_PAT }}" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"query { repository(owner: \\\"buerokratt\\\", name: \\\"$TARGET_REPOSITORY\\\") { issue(number: $ISSUE_NUMBER) { id } } }\"}" \
              https://api.github.com/graphql)

            GLOBAL_ID=$(echo "$issue_id_response" | jq -r '.data.repository.issue.id')

            if [ "$GLOBAL_ID" == "null" ] || [ -z "$GLOBAL_ID" ]; then
              echo "Failed to get the global ID for issue #$ISSUE_NUMBER."
              continue
            fi

            # Add issue to project board
            project_item_response=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.BYK_PAT }}" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { addProjectV2ItemById(input: {projectId: \\\"${{ env.project_id }}\\\", contentId: \\\"$GLOBAL_ID\\\"}) { item { id } } }\"}" \
              https://api.github.com/graphql)

            ITEM_ID=$(echo "$project_item_response" | jq -r '.data.addProjectV2ItemById.item.id')

            if [ "$ITEM_ID" == "null" ] || [ -z "$ITEM_ID" ]; then
              echo "Failed to add the issue to the project board for issue #$ISSUE_NUMBER."
              continue
            fi

            # Update field to "Ready"
            update_field_response=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.BYK_PAT }}" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { updateProjectV2ItemFieldValue(input: {projectId: \\\"${{ env.project_id }}\\\", itemId: \\\"$ITEM_ID\\\", fieldId: \\\"${{ env.field_id }}\\\", value: { singleSelectOptionId: \\\"${{ env.ready_option_id }}\\\" }}) { projectV2Item { id } } }\"}" \
              https://api.github.com/graphql)

            echo "Processed test failure: $TEST_NAME"
          done
